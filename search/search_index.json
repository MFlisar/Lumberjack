{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"Lumberjack <p>This is a full logging library with a build in way to log to console, file or any custom place as well as optional extensions to send a log file via mail or show it on the device.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>simply lazy evalution based logger based on a <code>L</code> class for the shortest possible log codes</li> <li>easily extendible with custom loggers</li> <li>offers console and file logger implementations</li> <li>supports log filtering</li> <li>providers a viewer for log files</li> </ul>"},{"location":"#screenshots","title":"Screenshots","text":"Logs Compose Viewer"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>This is a KMP (kotlin multiplatform) library and the provided modules do support following platforms.</p> Module android ios windows macos wasm Info Core <code>core</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  Lumberjack <code>implementation-lumberjack</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>logger-console</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>logger-file</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     -                  Extensions <code>extension-composeviewer</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                                     -                  <code>extension-feedback</code>                    -                                     -                                     -                                     -                                     -                                 (1)              <code>extension-notification</code>                    -                                     -                                     -                                     -                                     -                                 (1)              <code>extension-viewer</code>                    -                                     -                                     -                                     -                                     -                                 (2)              Timber <code>implementation-timber</code>                    -                                     -                                     -                                     -                                     -                                 (3)              <code>logger-timber-console</code>                    -                                     -                                     -                                     -                                     -                                 (3)              <code>logger-timber-file</code>                    -                                     -                                     -                                     -                                     -                                 (3)              <ul> <li>(1) notification and feedback module are android specific modules and therefor only support android</li> <li>(2) the viewer module is and older view based module that just supports android based on its nature</li> <li>(3) timber is only supported on android and therefor those modules are android only modules as well</li> </ul>"},{"location":"#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"#notes","title":"Notes","text":""},{"location":"#timber-vs-lumberjack-implementation","title":"Timber vs Lumberjack implementation","text":"<p>This library fully supports Jack Whartons Timber logging library (v4!). And was even based on it until Lumberjack v6. Beginning with v6 I wrote new modules that work without timber which leads to a smaller and more versitile non timber version. I would advice you to use the non timber versions but if you want to you can simply use the timber modules I provide as well - whatever you prefer.</p> Why did I do this? <p>I decided to not use <code>Timber</code> myself anymore because of following reasons:</p> <ul> <li><code>Timber</code> does explicitly rely on non lazy evaluating logging - it was a decision made by Jack Wharton and was the main reason to write <code>Lumberjack</code> at the beginning</li> <li><code>Timber</code> is restrictive regarding class extensions - in v5 I would need access to a field to continue supporting timber in <code>Lumberjack</code></li> <li><code>Timber</code> is considered as working and feature requests and/or pull requests are not accepted if not really necessary - like e.g. my minimal one here.</li> <li>additionally I always needed to extend the <code>BaseTree</code> from <code>Timber</code> because of the limiting restrictions of the default <code>BaseTree</code> as well as it was to restrictive to make adjustment in it ( I always had a nearly 1:1 copy of it inside my library here). This was needed to allow to adjust the stack trace depth so that <code>Lumberjack</code> will log the correct calling place as a wrapper around <code>Timber</code>.</li> </ul> <p>This lead to my final decision</p> <p><code>Lumberjack</code> does not need <code>Timber</code> and I provide a way to plug in <code>Timber</code> into <code>Lumberjack</code> now - this way using <code>Timber</code> and <code>Lumberjack</code> in combination is possible but not necessary anymore.</p>"},{"location":"compatibility/","title":"Compatibility","text":"<p>Information about the compatibility of this library with all my other libraries can be found here.</p>"},{"location":"dependencies/","title":"Dependencies","text":""},{"location":"dependencies/#compose","title":"Compose","text":"Dependency Version Infos Compose Multiplatform <code>1.8.2</code> Uses jetpack compose <code>1.8.2</code> and material3 <code>1.3.2</code> <p>More details about the jetpack dependencies can be found in JetBrains Release Notes.</p> <p>Warning</p> <p>I try to use as few experimental APIs as possible, but this library does use a few experimental APIs which are still marked as experimental. I will provide new versions as soon as possible if experimental APIs change or become stable.</p>"},{"location":"dependencies/#modules","title":"Modules","text":"Module Dependency Version Core <code>core</code> - Lumberjack <code>implementation-lumberjack</code> - <code>logger-console</code> - <code>logger-file</code> - Extensions <code>extension-composeviewer</code> FeedbackManager <code>3.0.0</code> <code>extension-feedback</code> FeedbackManager <code>3.0.0</code> <code>extension-notification</code> FeedbackManager <code>3.0.0</code> <code>extension-viewer</code> FeedbackManager FastScroller <code>3.0.0</code> <code>1.0.0</code> Timber <code>implementation-timber</code> Timber <code>4.7.1</code> <code>logger-timber-console</code> Timber <code>4.7.1</code> <code>logger-timber-file</code> Timber Logback slf4j <code>4.7.1</code> <code>3.0.0</code> <code>2.0.7</code>"},{"location":"me/","title":"About Me","text":"<p>Check out my main homepage to get an impression of what I do and my open source libraries, android apps and garmin watchfaces that I've developed.</p> <p>https://mflisar.github.io/</p>"},{"location":"other-libraries/","title":"Other Libraries","text":"<p>Here you can find an overview of my main libraries that do all play well together including some short descriptions.</p> Utilities Library Description CacheFileProvider This is a minimal library with a few lines of code and without dependencies that offers a simple file provider (simple read only access for sharing files with other apps). FeedbackManager This is a very small library that allows you to send feedback from an app without internet permission via email, either directly or via an unintrusive notification. Libraries Library Description KotBilling A kotlin coroutine based solution for handling in app purchases for billing library version 7. KotPreferences With this library you can declare preferences via kotlin delegates and observe and update them via kotlin flows. This works with any storage implementation, an implementation for JetPack DataStore is provided already. Compose Image Library Description ComposeChangelog This library offers you a a changelog dialog for compose including the ability to show new logs on app start only as well as filtering and customisation. ComposeColors A simple collection of colors that can be used inside any KMP compose project. ComposeDebugDrawer This library offers you a simple and easily extendable debug drawer. ComposeDialogs A compose framework for modal dialogs. ComposePreferences This library offers you preference screens for compose including the ability of endless nesting subscreens as well as simple integration of custom preferences. ComposeThemer This is a full compose theme engine that handles applying a theme as well as updating the system ui elements. Extendible and allows to simply apply user selected themes inside your app. Unofficial Projects Library Description kmp-parcelize a kmp parcelize library that allows you to use the `@Parcelize` annotation in your kmp projects kmp-library a collection of gradle plugins for my demo projects as well as for my own apps kmp-democomposables a collection of composables that I use for my demo projects Toolbox My personal toolbox library"},{"location":"setup/","title":"Setup","text":"<p>This library is distributed via maven central.</p> <p>Add dependencies like following to use this library inside your project.</p> DependenciesVersion Catalog <p>Simply add the dependencies inside your <code>build.gradle.kts</code> file.</p> build.gradle.kts<pre><code>val lumberjack = \"&lt;LATEST-VERSION&gt;\"\n\n// core\nimplementation(\"io.github.mflisar.lumberjack:core:$lumberjack\")\n\n// if you want to use the lumberjack logger\nimplementation(\"io.github.mflisar.lumberjack:implementation-lumberjack:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:logger-console:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:logger-file:$lumberjack\")\n\n// extensions that work with any implementation\nimplementation(\"io.github.mflisar.lumberjack:extension-composeviewer:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:extension-feedback:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:extension-notification:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:extension-viewer:$lumberjack\")\n\n// if you want to use the timber logger\nimplementation(\"io.github.mflisar.lumberjack:implementation-timber:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:logger-timber-console:$lumberjack\")\nimplementation(\"io.github.mflisar.lumberjack:logger-timber-file:$lumberjack\")\n</code></pre> <p>Define the dependencies inside your <code>libs.versions.toml</code> file.</p> libs.versions.toml<pre><code>[versions]\n\nlumberjack = \"&lt;LATEST-VERSION&gt;\"\n\n[libraries]\n\n# core\nlumberjack-core = { module = \"io.github.mflisar.lumberjack:core\", version.ref = \"lumberjack\" }\n\n# if you want to use the lumberjack logger\nlumberjack-implementation-lumberjack = { module = \"io.github.mflisar.lumberjack:implementation-lumberjack\", version.ref = \"lumberjack\" }\nlumberjack-logger-console = { module = \"io.github.mflisar.lumberjack:logger-console\", version.ref = \"lumberjack\" }\nlumberjack-logger-file = { module = \"io.github.mflisar.lumberjack:logger-file\", version.ref = \"lumberjack\" }\n\n# extensions that work with any implementation\nlumberjack-extension-composeviewer = { module = \"io.github.mflisar.lumberjack:extension-composeviewer\", version.ref = \"lumberjack\" }\nlumberjack-extension-feedback = { module = \"io.github.mflisar.lumberjack:extension-feedback\", version.ref = \"lumberjack\" }\nlumberjack-extension-notification = { module = \"io.github.mflisar.lumberjack:extension-notification\", version.ref = \"lumberjack\" }\nlumberjack-extension-viewer = { module = \"io.github.mflisar.lumberjack:extension-viewer\", version.ref = \"lumberjack\" }\n\n# if you want to use the timber logger\nlumberjack-implementation-timber = { module = \"io.github.mflisar.lumberjack:implementation-timber\", version.ref = \"lumberjack\" }\nlumberjack-logger-timber-console = { module = \"io.github.mflisar.lumberjack:logger-timber-console\", version.ref = \"lumberjack\" }\nlumberjack-logger-timber-file = { module = \"io.github.mflisar.lumberjack:logger-timber-file\", version.ref = \"lumberjack\" }\n</code></pre> <p>And then use the definitions in your projects like following:</p> build.gradle.kts<pre><code># core\nimplementation(libs.lumberjack.core)\n\n# if you want to use the lumberjack logger\nimplementation(libs.lumberjack.implementation.lumberjack)\nimplementation(libs.lumberjack.logger.console)\nimplementation(libs.lumberjack.logger.file)\n\n# extensions that work with any implementation\nimplementation(libs.lumberjack.extension.composeviewer)\nimplementation(libs.lumberjack.extension.feedback)\nimplementation(libs.lumberjack.extension.notification)\nimplementation(libs.lumberjack.extension.viewer)\n\n# if you want to use the timber logger\nimplementation(libs.lumberjack.implementation.timber)\nimplementation(libs.lumberjack.logger.timber.console)\nimplementation(libs.lumberjack.logger.timber.file)\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#1-setup-library","title":"1. Setup library","text":"LumberjackTimber <pre><code>class App : Application() {\n\n    override fun onCreate() {\n\n         // 1) install the implemantion\n         L.init(LumberjackLogger)\n\n         // 2) install loggers\n         L.plant(ConsoleLogger())\n         val setup = FileLoggerSetup.Daily(this)\n         L.plant(FileLogger(setup))\n    }\n\n}\n</code></pre> <pre><code>class App : Application() {\n\n    override fun onCreate() {\n\n         // 1) install the implemantion\n         L.init(TimberLogger)\n\n         // 2) install loggers (trees) \n         Timber.plant(ConsoleTree())\n         val setup = FileLoggingSetup.DateFiles.create(this  )\n         Timber.plant(FileLoggingTree(setup))\n    }\n\n}\n</code></pre>"},{"location":"usage/#2-usage","title":"2. Usage","text":"<pre><code>// wherever you want use one of L.* functions for logging\n// all the functions are implemented as inline functions with lambdas - this means,\n// everything inside the lambda is only executed if the log is really ussed\n\nL.d { \"a debug log\" }\nL.e { \"a error log\" }\nL.e(e)\nL.e(e) { \"an exception log with an additonal message\" }\nL.v { \"TEST-LOG - Verbose log...\" }\nL.d { \"TEST-LOG - Debug log...\" }\nL.i { \"TEST-LOG - Info log...\" }\nL.w { \"TEST-LOG - Warn log...\" }\nL.e { \"TEST-LOG - Error log...\" }\nL.wtf { \"TEST-LOG - WTF log...\" }\n\n// optional tags work like following\nL.tag(\"LEVEL\").d { \"Tagged log message...\" }\n\n// you can log something optionally like following\nL.logIf { false }?.d { \"This will never be logged because logIf evaluates to false...\" }\n\n// manual log levels\nL.log(Level.DEBUG) { \"Debug level log via L.log instead of L.d\" }\n</code></pre>"},{"location":"usage/#3-filtering-logs","title":"3. Filtering Logs","text":"LumberjackTimber <pre><code>// typealias LumberjackFilter = (level: Level, tag: String?, time: Long, fileName: String, className: String, methodName: String, line: Int, msg: String?, throwable: Throwable?) -&gt; Boolean\nval filter = object : LumberjackFilter {\n    override fun invoke(\n        level: Level,\n        tag: String?,\n        time: Long,\n        fileName: String,\n        className: String,\n        methodName: String,\n        line: Int,\n        msg: String?,\n        throwable: Throwable?\n    ): Boolean {\n        // decide if you want to log this message...\n        return true\n    }\n}\n// the filter can then be attached to any logger implementation\nval consoleLogger = ConsoleLogger(filter = filter)\nval fileLogger = FileLogger(filter = filter)\n</code></pre> <p>Tip</p> <p>The lumberjack implementation allows you more granular filter options as well as a custom filter for each logger implementation!</p> <pre><code>TimberLogger.filter = object: IFilter {\n    override fun isTagEnabled(baseTree: BaseTree, tag: String): Boolean {\n        // decide if you want to log this tag on this tree...\n        return true\n    }\n    override fun isPackageNameEnabled(packageName: String): Boolean {\n        // decide if you want to log if the log comes from a class within the provided package name\n        return true\n    }\n}\n</code></pre>"},{"location":"usage/#4-other-settings","title":"4. Other settings","text":"<pre><code>val minLogLevel = if (BuildConfig.DEBUG) Level.DEBUG else Level.VERBOSE // use Level.NONE to disable all logs\n\n// if desired you can enable/disable all logs completely \n// e.g. in a release build like following \n// =&gt; you probably would want to do this inside the application after the init of Lumberjack\nL.enable(minLogLevel) \n\n// Alternatively every logger does support a minLogLevel flag as well\nval consoleLogger = ConsoleLogger(minLogLevel = minLogLevel)\nval fileLogger = FileLogger(minLogLevel = minLogLevel, ...)\n</code></pre>"},{"location":"advanced/custom-logger/","title":"Custom Logger","text":"<p>Either use the timber version and plug in your custom loggers into timber (check out timber for that please) or simply plug in a custom logger into lumberjack directly if you do not use the timber solution like following - all you need to do is implement a single function and then add your logger to <code>Lumberjack</code> (following example is the current <code>ConsoleLogger</code> implementation).</p> <pre><code>class ConsoleLogger(\n    override var enabled: Boolean = true,\n    override val filter: LumberjackFilter = DefaultLumberjackFilter\n) : ILumberjackLogger {\n\n    override fun log(\n        level: Level,\n        tag: String?,\n        time: Long,\n        fileName: String,\n        className: String,\n        methodName: String,\n        line: Int,\n        msg: String?,\n        throwable: Throwable?\n    ) {\n        val link = \"(${fileName}:${line})\"\n        val log = listOfNotNull(\n            msg,\n            link.takeIf { throwable == null },\n            throwable?.stackTraceToString()?.let { \"\\n$it\" }\n        ).joinToString(\" \")\n        Log.println(level.priority, tag, log)\n    }\n\n}\n</code></pre> <p>That's all. You can do the logging asynchronous as well if you want - just do whatever you want inside your logger implementation.</p>"},{"location":"migration/v7/","title":"v7","text":"<p>Info</p> <p>Version <code>7.*</code> is a kotlin multiplatform rewrite, that's why some fundamantal changes needed to be done!</p> <p>Overall some things have become extension functions to provide target specific implementations. Platform specific functions and overloads have been added to provide a good single platform experience and some typos have been fixed as well.</p> <p>Following is an overview on what has changed and shows how you can migrate your project.</p>"},{"location":"migration/v7/#logger-setup-classes","title":"Logger setup classes","text":"<p>I do provide platform specific <code>create</code> function to make single platform usage easier. On android those do look like following now:</p> <pre><code>val setup = FileLoggerSetup.Daily.create(\n    context, \n    fileBaseName = \"log_daily\"\n)\nval setup2 = FileLoggerSetup.FileSize.create(\n    context, \n    maxFileSizeInBytes = 1000 * 10 /* 10 kB */,  \n    fileBaseName = \"log_size\", \n    filesToKeep = 2\n)\n</code></pre> <p>In MP projects you can simply use the classes themself if you want to.</p>"},{"location":"migration/v7/#functions-become-extension-functions","title":"Functions become extension functions","text":"<p>To provide platform specific implementations, some functions needed to be converted to extension functions:</p> <ul> <li><code>getAllExistingLogFiles</code> (new import: <code>import com.michaelflisar.lumberjack.core.getAllExistingLogFiles</code>)</li> <li><code>Level.priority</code> (new import: <code>import com.michaelflisar.lumberjack.core.classes.priority</code>)</li> <li><code>getLatestLogFiles</code> =&gt; <code>getLatestLogFile</code> (also fixed a typo, new import: <code>import com.michaelflisar.lumberjack.core.getLatestLogFile</code>)</li> </ul>"},{"location":"modules/compose-viewer/","title":"Compose Viewer","text":"<p>Info</p> <p>If you use compose in your app you should use this viewer - it allows you to show log files directly inside your app.</p> <pre><code>val showLogViewer = rememberSaveable {\n    mutableStateOf(false)\n}\nLumberjackDialog(\n    visible = showLogViewer,\n    title = \"Logs\",\n    setup = &lt;a file logging setup&gt;,\n    // optional\n    style = LumberjackViewDefaults.style(),\n    darkTheme = isSystemInDarkTheme(),\n    mail = null\n)\n</code></pre> <p>Alternatively you can always embed the view directly like following:</p> <pre><code>LumberjackView(\n    setup = &lt;a file logging setup&gt;,\n    // optional\n    modifier = Modifier,\n    file = rememberLogFile(),\n    data = rememberLogFileData(),\n    state = rememberLazyListState(),\n    darkTheme = isSystemInDarkTheme(),\n    style = LumberjackViewDefaults.style(),\n    useScrollableLines = remember { mutableStateOf(false) }\n)\n</code></pre> <p>Tip</p> <p>You can also embed the whole dialog \"content view\" inside a layout if you want to also show the menu and use it's features</p> <pre><code>LumberjackDialogContent(\n    title = \"Logs\",\n    setup = &lt;a file logging setup&gt;,\n    // optional\n    style= LumberjackViewDefaults.style(),\n    darkTheme = isSystemInDarkTheme(),\n    mail = null\n)\n</code></pre> Compose Viewer"},{"location":"modules/feedback/","title":"Feedback","text":"<p>Note</p> <p>This extension does only support android!</p> <p>This small extension simply allows you to send a log file via mail (no internet connection required). This will be done by sharing the file as email <code>Intent</code>.</p> <pre><code>L.sendFeedback(\n    context = context, \n    receiver = \"some.mail@gmail.com\",\n    attachments = listOfNotNull(&lt;file-logging-setup&gt;.getLatestLogFiles())  \n)\n</code></pre>"},{"location":"modules/notification/","title":"Notification","text":"<p>Note</p> <p>This extension does only support android!</p> <p>This small extension provides you with with a few functions to create notifications (for app testers or for the dev for example) that can be clicked and then will allow the user to send the log file to you via the <code>extension-feedback</code>. Or to open the log file by clicking the notification.</p> <pre><code>// shows a notifcation - on notification click the suer can do following:\n// * nothing\n// * send a mail with optional attachments like e.g. log files, database, whatever\n// * execute a custom action\nfun L.showNotification(\n    context: Context,\n    notificationIcon: Int,\n    notificationChannelId: String,\n    notificationId: Int,\n    notificationTitle: String = \"Rare exception found\",\n    notificationText: String = \"Please report this error by clicking this notification, thanks\",\n    clickHandler: NotificationClickHandler\n)\n\n// Click Handlers\n// here's a short overview of the available click handlers\nsealed class NotificationClickHandler {\n\n    class SendFeedback(\n        context: Context,\n        val receiver: String,\n        val subject: String = \"Exception found in ${context.packageName}\",\n        val titleForChooser: String = \"Send report with\",\n        val attachments: List&lt;File&gt; = emptyList()\n    ) : NotificationClickHandler()\n\n    class ClickIntent(\n        val intent: Intent,\n        val apply: ((builder: NotificationCompat.Builder) -&gt; Unit)? = null\n    ): NotificationClickHandler()\n\n    data object None: NotificationClickHandler()\n}   \n</code></pre>"},{"location":"modules/viewer/","title":"Viewer","text":"<p>Note</p> <p>This extension does only support android!</p> <pre><code>// show the log viewer activity (mail address is optional, \n// if it's null, the send mail entry will be removed from the viewers menu)\nL.showLog(\n    context, \n    fileLoggingSetup, \n    \"some.mail@gmail.com\"\n)\n</code></pre> Viewer"}]}